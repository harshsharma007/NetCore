using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace NetCore.Kudvenkat.NetCore
{
    public class H10_MiddlewareInAspNetCore
    {
        /*
            Middleware is a very broad term. In ASP.NET Core, Middleware is a piece of software that can handle an HTTP request or response. A given Middleware
            component has a very specific purpose, for example we may have a Middleware component that authenticates a user, another piece of Middleware to handle
            errors, yet another Middleware to serve StaticFiles such as JavaScript files, CSS files, images etc. It is these Middleware components that we use to set
            up a request processing pipeline. It is this pipeline that determines how a request is processed. The request pipeline is configured as part of the
            application Startup by the configure() method that is present in the Startup class.
            
            We already know that the execution of an ASP.NET Core project starts with the Main() method. Main() method calls CreateDefaultBuilder() method which sets
            up a default web host. As part of setting up the web host we are also configuring the Startup class using the UseStartup extension method. Startup class
            has two methods ConfigureServices() and Configure().
            
            Configure() method sets up a request processing pipeline for our ASP.NET Core application. The code in this method is generated by the empty project
            template. The code sets up a very simple request processing pipeline with just two pieces of Middleware. The first Middleware is UseDeveloperExceptionPage()
            and the second Middleware is registered using the Run() extension method of the IApplicationBuilder interface.
            
            Working on Middleware component
            A Middleware component in ASP.NET Core has access to both the incoming request and the outgoing response. So a Middleware component may process an incoming
            request and then pass that request to the next piece of Middleware in the pipeline for further processing.

                           +------------+               +---------------+               +------------+
            ---------------|            |---------------|               |---------------|            |--------------->
                           |  Logging   |               |  StaticFiles  |               |     MVC    |
            <--------------|            |---------------|               |---------------|            |----------------
                           +------------+               +---------------+               +------------+
            
            For example, let's say logging Middleware is the first Middleware in our application request processing pipeline so when a request arrives from the
            web server at this Middleware where this Middleware logs the time that the request is received and then passes that incoming request to the next piece of
            Middleware, in our case to the StaticFiles Middleware for further processing. A Middleware component may handle the incoming requests and decide not
            to call the next piece of Middleware in the pipeline. This is called short-circuiting the request pipeline. Short-circuiting is often desirable because
            it avoids unnecessary work. For example, if the request is for a static file like an image, CSS file, JavaScript file etc these StaticFiles, Middleware
            can handle and serve that request and then short-circuit the rest of the pipeline, this means in our case the StaticFiles Middleware will not call the
            next piece of Middleware that is the MVC Middleware.
            
            If the request is for a static file like an image for example a Middleware component may also simply ignore the incoming request and then pass that
            request on to the next piece of Middleware for further processing. For example, let's say this time we are issuing a request to localhost for slash
            employees basically we want to retrieve the list of all employees so when this request arrives from the web server at our first Middleware in the pipeline
            which is logging this Middleware simply logs the time the request is received and then pass that request to the next piece of Middleware in our case to
            StaticFiles Middleware. Since this request is not for a static file like an image, CSS file, JavaScript file etc, static file Middleware may not be
            interested in processing this request so it will pass this request to the next piece of Middleware which is MVC Middleware. This is an MVC request so the
            MVC Middleware knows how to handle that request so the respective MVC controller produces the HTTP response.
            
            At this point, the pipeline reverses itself, the MVC Middleware passes the response to the StaticFiles Middleware. The static file Middleware is not
            interested in processing that response further so it may simply pass that response to the next piece of Middleware which is the logging Middleware. This
            Middleware may simply log the time the response is received. Remember this logging Middleware also has the time it received the request. So using these
            two times it may also compute the overall time taken to service that request and then pass the response to the web server. The web server in turn may
            send that response to the client who made that request so it is these Middleware components in the pipeline that determine how a request is processed in
            ASP.NET Core. These Middleware components are executed in order they are added to the pipeline. Care should be taken to add the Middleware in the right
            order otherwise the application may not function as expected.
            
            These Middleware components are available as Nuget packages, this means updates are now handled by Nuget providing us the ability to update each Middleware
            separately. Depending on your application requirements you may add as many or as few Middleware components to the request processing pipeline. For example,
            if you are developing a simple web application with a few static HTML pages and images then your request processing pipeline may contain just the
            StaticFiles Middleware.
            
            On the other hand, if you are developing a secure data-driven web application then you may need serveral Middleware components like StaticFiles
            Middleware, authentication Middleware, authorization Middleware, MVC Middleware etc. The point here is you have the complete control over configuring
            the request processing pipeline. This also means from a memory and performance stand point you only pay for the Middleware components you have in your
            application request processing pipeline.
            
            Middleware in ASP.NET Core summary:
            1. Has access to both Request and Response.
            2. May simply pass the Request to next Middleware.
            3. May process and then pass the Request to next Middleware.
            4. May handle the Request and short-circuit the pipeline.
            5. May process the outgoing Response.
            6. Middlewares are executed in the order they are added.
        */
    }
}
